name: Release

on:
  workflow_dispatch: # Manual trigger only
    inputs:
      dry-run:
        description: "Dry run (no actual release)"
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  id-token: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # ratchet:actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for conventional commits
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Deno
        uses: denoland/setup-deno@e95548e56dfa95d4e1a28d6f422fafe75c4c26fb # ratchet:denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Validate code
        run: |
          deno fmt --check
          deno lint
          deno check src/main.ts
          deno test --allow-all

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # ratchet:actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build binaries
        run: |
          set -euo pipefail
          mkdir -p dist

          targets=(
            "x86_64-unknown-linux-gnu:linux-x64"
            "aarch64-unknown-linux-gnu:linux-arm64"
            "x86_64-apple-darwin:macos-x64"
            "aarch64-apple-darwin:macos-arm64"
            "x86_64-pc-windows-msvc:windows-x64.exe"
          )

          for target_pair in "${targets[@]}"; do
            target="${target_pair%%:*}"
            name="${target_pair##*:}"
            echo "Building claude-cleaner-$name for $target..."
            if ! deno compile --allow-all --target "$target" --output "dist/claude-cleaner-$name" src/main.ts; then
              echo "Error: Failed to build for $target"
              exit 1
            fi
          done

      - name: Verify binaries
        run: |
          echo "Verifying built binaries..."
          ls -lh dist/

          binaries=(
            "claude-cleaner-linux-x64"
            "claude-cleaner-linux-arm64"
            "claude-cleaner-macos-x64"
            "claude-cleaner-macos-arm64"
            "claude-cleaner-windows-x64.exe"
          )

          for binary in "${binaries[@]}"; do
            if [ -f "dist/$binary" ]; then
              echo "✓ $binary exists"
              file "dist/$binary"
            else
              echo "✗ $binary missing"
              exit 1
            fi
          done

          echo "All binaries built successfully"

          # Smoke test: verify Linux binary is executable and shows version
          echo ""
          echo "Running smoke test on Linux x64 binary..."
          chmod +x dist/claude-cleaner-linux-x64
          ./dist/claude-cleaner-linux-x64 --version

      - name: Run semantic-release (dry-run)
        if: ${{ inputs.dry-run }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --dry-run

      - name: Run semantic-release
        if: ${{ !inputs.dry-run }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
