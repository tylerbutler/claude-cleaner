name: Release

on:
  workflow_dispatch: # Manual trigger only
    inputs:
      dry-run:
        description: "Dry run (no actual release)"
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  id-token: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for conventional commits
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Validate code
        run: |
          deno fmt --check
          deno lint
          deno check src/main.ts
          deno test --allow-all

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Build binaries
        run: |
          set -euo pipefail
          mkdir -p dist

          targets=(
            "x86_64-unknown-linux-gnu:linux-x64"
            "aarch64-unknown-linux-gnu:linux-arm64"
            "x86_64-apple-darwin:macos-x64"
            "aarch64-apple-darwin:macos-arm64"
            "x86_64-pc-windows-msvc:windows-x64.exe"
          )

          for target_pair in "${targets[@]}"; do
            target="${target_pair%%:*}"
            name="${target_pair##*:}"
            echo "Building claude-cleaner-$name for $target..."
            deno compile --allow-all --target "$target" --output "dist/claude-cleaner-$name" src/main.ts
          done

      - name: Verify binaries
        run: |
          echo "Verifying built binaries..."
          ls -lh dist/
          file dist/claude-cleaner-linux-x64
          echo "All binaries built successfully"

      - name: Run semantic-release (dry-run)
        if: ${{ inputs.dry-run }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --dry-run

      - name: Run semantic-release
        if: ${{ !inputs.dry-run }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
